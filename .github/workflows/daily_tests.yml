name: Daily Tests
on:
  schedule:
  - cron:  '0 8 * * *'
  repository_dispatch:
    types: [daily_tests]
env:
  GO111MODULE: on

jobs:

  precompiled_tests_binaries:
    name: Precompiled tests binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu ]
    runs-on: ${{ matrix.os }}-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # To compress werf_with_coverage binary for macOS
    # This fixes related with monkey patching panic (panic: permission denied [recovered])
    - name: Install upx (macOS)
      run: brew install upx || true
      if: matrix.os == 'macOS'

    - name: Compile tests binaries
      run: |
        # unit tests binaries
        ./scripts/tests/precompiled_tests_binaries.sh ./cmd ./precompiled_tests_binaries/unit
        ./scripts/tests/precompiled_tests_binaries.sh ./pkg ./precompiled_tests_binaries/unit

        # integration tests binaries
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/default ./precompiled_tests_binaries/integration_default
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/k8s_per_version ./precompiled_tests_binaries/integration_k8s_per_version
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/container_registry_per_implementation ./precompiled_tests_binaries/integration_container_registry_per_implementation
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/k8s_per_version_and_container_registry_per_implementation ./precompiled_tests_binaries/integration_k8s_per_version_and_container_registry_per_implementation

        # werf with coverage binary
        ./scripts/tests/werf_with_coverage.sh
      shell: bash

    - name: Upload unit tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_unit_tests_binaries"
        path: precompiled_tests_binaries/unit

    - name: Upload integration default tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_default_tests_binaries"
        path: precompiled_tests_binaries/integration_default

    - name: Upload integration k8s_per_version tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_per_version_tests_binaries"
        path: precompiled_tests_binaries/integration_k8s_per_version

    - name: Upload integration container_registry_per_implementation tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_container_registry_per_implementation_tests_binaries"
        path: precompiled_tests_binaries/integration_container_registry_per_implementation

    - name: Upload integration k8s_per_version_and_container_registry_per_implementation tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_per_version_and_container_registry_per_implementation_tests_binaries"
        path: precompiled_tests_binaries/integration_k8s_per_version_and_container_registry_per_implementation

    - name: Upload werf with coverage binary (ubuntu, macOS)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage
      if: matrix.os != 'windows'

    - name: Upload werf with coverage binary (windows)
      uses: actions/upload-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: bin/tests/werf_with_coverage.exe
      if: matrix.os == 'windows'

  unit_tests:
    name: Unit tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
#        os: [ubuntu, macOS, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download unit tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_unit_tests_binaries"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        ./scripts/ci/git.sh

        find . -type f \( -name '*.test' -or -name '*.test.exe' \) -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: |
        test_binaries=$(find . -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do
          coverage_file_name="$(openssl rand -hex 6)-$(date +"%H_%M_%S")_coverage.out"
          $test_binary -test.v -test.coverprofile="$WERF_TEST_COVERAGE_DIR"/"$coverage_file_name"
        done
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_default_tests:
    name: Integration default tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        extra-find-args:
        - "-name 'git.test'"
        - "-name 'ansible.test'"
        - "! -name 'git.test' ! -name 'ansible.test'"
    runs-on: ${{ matrix.os }}-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      if: matrix.extra-find-args != '! -name ''git.test'' ! -name ''ansible.test'''

    - name: Checkout code (git history as fixtures for tests)
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      if: matrix.extra-find-args == '! -name ''git.test'' ! -name ''ansible.test'''

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration default tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_default_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_default_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo@latest

        chmod +x werf_with_coverage
        find integration -type f -name '*.test' -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: |
        test_binaries=$(find integration -type f -name '*.test' ${{ matrix.extra-find-args }})
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_container_registry_per_implementation_tests:
    name: Integration container_registry_per_implementation tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        implementation:
        - acr
        - default
        - dockerhub
        - ecr
        - gcr
        - github
        - harbor
        - quay
    runs-on: ${{ matrix.os }}-latest
    env:
      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ACR: 1
      WERF_TEST_ACR_PASSWORD: ${{ secrets.WERF_TEST_ACR_PASSWORD }}
      WERF_TEST_ACR_REGISTRY: ${{ secrets.WERF_TEST_ACR_REGISTRY }}
      WERF_TEST_ACR_USERNAME: ${{ secrets.WERF_TEST_ACR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DEFAULT: 1
      WERF_TEST_DEFAULT_PASSWORD: ${{ secrets.WERF_TEST_DEFAULT_PASSWORD }}
      WERF_TEST_DEFAULT_REGISTRY: ${{ secrets.WERF_TEST_DEFAULT_REGISTRY }}
      WERF_TEST_DEFAULT_USERNAME: ${{ secrets.WERF_TEST_DEFAULT_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DOCKERHUB: 0
      WERF_TEST_DOCKERHUB_PASSWORD: ${{ secrets.WERF_TEST_DOCKERHUB_PASSWORD }}
      WERF_TEST_DOCKERHUB_REGISTRY: ${{ secrets.WERF_TEST_DOCKERHUB_REGISTRY }}
      WERF_TEST_DOCKERHUB_USERNAME: ${{ secrets.WERF_TEST_DOCKERHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ECR: 1
      WERF_TEST_ECR_REGISTRY: ${{ secrets.WERF_TEST_ECR_REGISTRY }}
      WERF_TEST_ECR_PASSWORD: ${{ secrets.WERF_TEST_ECR_PASSWORD }}
      WERF_TEST_ECR_USERNAME: ${{ secrets.WERF_TEST_ECR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GCR: 1
      WERF_TEST_GCR_BASE64_CONFIG: ${{ secrets.WERF_TEST_GCR_BASE64_CONFIG }}
      WERF_TEST_GCR_REGISTRY: ${{ secrets.WERF_TEST_GCR_REGISTRY }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GITHUB: 1
      WERF_TEST_GITHUB_PASSWORD: ${{ secrets.WERF_TEST_GITHUB_PASSWORD }}
      WERF_TEST_GITHUB_REGISTRY: ${{ secrets.WERF_TEST_GITHUB_REGISTRY }}
      WERF_TEST_GITHUB_TOKEN: ${{ secrets.WERF_TEST_GITHUB_TOKEN }}
      WERF_TEST_GITHUB_USERNAME: ${{ secrets.WERF_TEST_GITHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_HARBOR: 1
      WERF_TEST_HARBOR_PASSWORD: ${{ secrets.WERF_TEST_HARBOR_PASSWORD }}
      WERF_TEST_HARBOR_REGISTRY: ${{ secrets.WERF_TEST_HARBOR_REGISTRY }}
      WERF_TEST_HARBOR_USERNAME: ${{ secrets.WERF_TEST_HARBOR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_QUAY: 0
      WERF_TEST_QUAY_PASSWORD: ${{ secrets.WERF_TEST_QUAY_PASSWORD }}
      WERF_TEST_QUAY_REGISTRY: ${{ secrets.WERF_TEST_QUAY_REGISTRY }}
      WERF_TEST_QUAY_TOKEN: ${{ secrets.WERF_TEST_QUAY_TOKEN }}
      WERF_TEST_QUAY_USERNAME: ${{ secrets.WERF_TEST_QUAY_USERNAME }}

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration container_registry_per_implementation tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_container_registry_per_implementation_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Login (acr)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      if: matrix.implementation == 'acr'

    - name: Login (ecr)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      if: matrix.implementation == 'ecr'

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_container_registry_per_implementation_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        ./scripts/ci/git.sh
        ./scripts/ci/integration_tests_registries_login.sh ${{ matrix.implementation }}

        go install github.com/onsi/ginkgo/ginkgo@latest

        chmod +x werf_with_coverage
        find integration -type f -name '*.test' -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: |
        test_binaries=$(find integration -type f -name '*.test' ${{ matrix.extra-find-args }})
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p --flakeAttempts=3 -keepGoing --focus="\[${{ matrix.implementation }}\]" $test_binaries
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_per_version_tests:
    name: Integration k8s_per_version tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        k8s_version: [1.19]

    runs-on: ${{ matrix.os }}-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration k8s_per_version tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_per_version_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_per_version_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo@latest

        chmod +x werf_with_coverage
        find integration -type f -name '*.test' -exec chmod +x {} \;

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f -name '*.test')
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_per_version_and_container_registry_per_implementation_tests:
    name: Integration k8s_per_version_and_container_registry_per_implementation tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        k8s_version: [1.19]

    runs-on: ${{ matrix.os }}-latest
    env:
      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ACR: 1
      WERF_TEST_ACR_PASSWORD: ${{ secrets.WERF_TEST_ACR_PASSWORD }}
      WERF_TEST_ACR_REGISTRY: ${{ secrets.WERF_TEST_ACR_REGISTRY }}
      WERF_TEST_ACR_USERNAME: ${{ secrets.WERF_TEST_ACR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DEFAULT: 1
      WERF_TEST_DEFAULT_PASSWORD: ${{ secrets.WERF_TEST_DEFAULT_PASSWORD }}
      WERF_TEST_DEFAULT_REGISTRY: ${{ secrets.WERF_TEST_DEFAULT_REGISTRY }}
      WERF_TEST_DEFAULT_USERNAME: ${{ secrets.WERF_TEST_DEFAULT_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DOCKERHUB: 1
      WERF_TEST_DOCKERHUB_PASSWORD: ${{ secrets.WERF_TEST_DOCKERHUB_PASSWORD }}
      WERF_TEST_DOCKERHUB_REGISTRY: ${{ secrets.WERF_TEST_DOCKERHUB_REGISTRY }}
      WERF_TEST_DOCKERHUB_USERNAME: ${{ secrets.WERF_TEST_DOCKERHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ECR: 1
      WERF_TEST_ECR_REGISTRY: ${{ secrets.WERF_TEST_ECR_REGISTRY }}
      WERF_TEST_ECR_PASSWORD: ${{ secrets.WERF_TEST_ECR_PASSWORD }}
      WERF_TEST_ECR_USERNAME: ${{ secrets.WERF_TEST_ECR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GCR: 1
      WERF_TEST_GCR_BASE64_CONFIG: ${{ secrets.WERF_TEST_GCR_BASE64_CONFIG }}
      WERF_TEST_GCR_REGISTRY: ${{ secrets.WERF_TEST_GCR_REGISTRY }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GITHUB: 1
      WERF_TEST_GITHUB_PASSWORD: ${{ secrets.WERF_TEST_GITHUB_PASSWORD }}
      WERF_TEST_GITHUB_REGISTRY: ${{ secrets.WERF_TEST_GITHUB_REGISTRY }}
      WERF_TEST_GITHUB_TOKEN: ${{ secrets.WERF_TEST_GITHUB_TOKEN }}
      WERF_TEST_GITHUB_USERNAME: ${{ secrets.WERF_TEST_GITHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_HARBOR: 1
      WERF_TEST_HARBOR_PASSWORD: ${{ secrets.WERF_TEST_HARBOR_PASSWORD }}
      WERF_TEST_HARBOR_REGISTRY: ${{ secrets.WERF_TEST_HARBOR_REGISTRY }}
      WERF_TEST_HARBOR_USERNAME: ${{ secrets.WERF_TEST_HARBOR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_QUAY: 0
      WERF_TEST_QUAY_PASSWORD: ${{ secrets.WERF_TEST_QUAY_PASSWORD }}
      WERF_TEST_QUAY_REGISTRY: ${{ secrets.WERF_TEST_QUAY_REGISTRY }}
      WERF_TEST_QUAY_TOKEN: ${{ secrets.WERF_TEST_QUAY_TOKEN }}
      WERF_TEST_QUAY_USERNAME: ${{ secrets.WERF_TEST_QUAY_USERNAME }}
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration k8s_per_version_and_container_registry_per_implementation tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_per_version_and_container_registry_per_implementation_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Login (acr)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login (ecr)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_per_version_and_container_registry_per_implementation_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        ./scripts/ci/git.sh
        ./scripts/ci/integration_tests_registries_login.sh default
        ./scripts/ci/integration_tests_registries_login.sh acr
        ./scripts/ci/integration_tests_registries_login.sh dockerhub
        ./scripts/ci/integration_tests_registries_login.sh ecr
        ./scripts/ci/integration_tests_registries_login.sh gcr
        ./scripts/ci/integration_tests_registries_login.sh harbor
        ./scripts/ci/integration_tests_registries_login.sh quay
        ./scripts/ci/integration_tests_registries_login.sh github

        go install github.com/onsi/ginkgo/ginkgo@latest

        chmod +x werf_with_coverage
        find integration -type f -name '*.test' -exec chmod +x {} \;

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f -name '*.test')
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p --flakeAttempts=3 -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_default_tests_on_self_hosted_runners:
    name: Integration default tests (self-hosted)
    needs: precompiled_tests_binaries
    if: "false"
#    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS, windows]
        extra-find-args:
        - "-name 'git.test*'"
        - "-name 'ansible.test*'"
        - "! -name 'git.test*' ! -name 'ansible.test*'"
    runs-on: [self-hosted, "${{ matrix.os }}-latest"]
    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      if: matrix.extra-find-args != '! -name ''git.test*'' ! -name ''ansible.test*'''

    - name: Checkout code (git history as fixtures for tests)
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      if: matrix.extra-find-args == '! -name ''git.test*'' ! -name ''ansible.test*'''

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration default tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_default_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_default_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        # regular ginkgo CLI (onsi/ginkgo) cannot run pre-compiled test package on windows (https://github.com/onsi/ginkgo/issues/529)
        git clone https://github.com/werf/ginkgo.git fork
        cd fork/ginkgo
        go build .
        mv ginkgo $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE

        chmod +x werf_with_coverage
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do chmod +x $test_binary; done

        export DOCKER_CONFIG=$(mktemp -d)
        echo DOCKER_CONFIG=$DOCKER_CONFIG >> $GITHUB_ENV
      shell: bash

    - name: Test (macOS)
      run: |
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \) ${{ matrix.extra-find-args }})
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash
      if: matrix.os == 'macOS'

    - name: Test (windows)
      run: |
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \) ${{ matrix.extra-find-args }})
        WERF_DISABLE_AUTO_HOST_CLEANUP=1 WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash
      if: matrix.os == 'windows'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_per_version_tests_on_self_hosted_runners:
    name: Integration k8s_per_version tests (self-hosted)
    needs: precompiled_tests_binaries
    if: "false"
#    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS, windows]
        k8s_version: [1.19]
    runs-on: [self-hosted, "${{ matrix.os }}-latest"]
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration k8s_per_version tests binaries
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_integration_k8s_per_version_tests_binaries"
        path: .

    - name: Download werf with coverage binary
      uses: actions/download-artifact@master
      with:
        name: "${{ matrix.os }}_werf_with_coverage"
        path: .

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_per_version_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo WERF_TEST_COVERAGE_DIR=$WERF_TEST_COVERAGE_DIR >> $GITHUB_ENV

        # regular ginkgo CLI (onsi/ginkgo) cannot run pre-compiled test package on windows (https://github.com/onsi/ginkgo/issues/529)
        git clone https://github.com/werf/ginkgo.git fork
        cd fork/ginkgo
        go build .
        mv ginkgo $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE

        chmod +x werf_with_coverage
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \))
        for test_binary in $test_binaries; do chmod +x $test_binary; done

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV

        export DOCKER_CONFIG=$(mktemp -d)
        echo DOCKER_CONFIG=$DOCKER_CONFIG >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test (macOS)
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \))
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}
      if: matrix.os == 'macOS'

    - name: Test (windows)
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f \( -name '*.test' -or -name '*.test.exe' \))
        WERF_DISABLE_AUTO_HOST_CLEANUP=1 WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf_with_coverage ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}
      if: matrix.os == 'windows'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  upload_coverage:
    name: Upload coverage
    needs:
    - unit_tests

    - integration_default_tests
#    - integration_default_tests_on_self_hosted_runners

    - integration_k8s_per_version_tests
#    - integration_k8s_per_version_tests_on_self_hosted_runners

    - integration_container_registry_per_implementation_tests
    - integration_k8s_per_version_and_container_registry_per_implementation_tests
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Install werf build dependencies
      run: sudo apt-get install -y libbtrfs-dev

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Prepare environment
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

        go install github.com/wadey/gocovmerge@latest

        echo WERF_TEST_COVERAGE_DIR=tests_coverage >> $GITHUB_ENV

    - name: Prepare coverage file
      run: |
        # FIXME: determine problems with coverage records and remove seds
        find $WERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|/home/ubuntu/actions-runner/_work/werf/werf|github.com/werf/werf|g" {} +

        find $WERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|/home/runner/work/werf/werf|github.com/werf/werf|g" {} +

        find $WERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|/Users/runner/runners/[0-9.]*/work/werf/werf|github.com/werf/werf|g" {} +

        find $WERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e 's|D:\\a\\werf\\werf\\cmd\\werf\\main.go|github.com/werf/werf/cmd/werf/main.go|g' {} +

        coverage_files=$(find $WERF_TEST_COVERAGE_DIR -name '*.out')
        gocovmerge ${coverage_files[@]} > coverage.out

    - name: Format and upload
      run: |
        export GIT_BRANCH=${GITHUB_REF:11}
        export GIT_COMMIT_SHA=$GITHUB_SHA

        ./cc-test-reporter format-coverage \
            -t=gocov \
            -p=github.com/werf/werf/ \
            coverage.out

        ./cc-test-reporter upload-coverage
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  notification:
    name: Notification
    if: always()
    needs: upload_coverage
    runs-on: ubuntu-latest
    steps:

      - uses: technote-space/workflow-conclusion-action@v2

      - name: Notify
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }}
          MSG_MINIMAL: "ref,actions url"
