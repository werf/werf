name: docs:validate

on:
  pull_request:
    paths:
      - ".github/**"
      - "Taskfile.dist.yaml"
      - "cmd/werf/**"
      - "docs/**"
      - "scripts/**"
      - "integration/suites/docs/**"
      - "README.md"
      - "go.mod"
  repository_dispatch:
    types: ["docs:validate"]
  workflow_dispatch:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  DEBIAN_FRONTEND: "noninteractive"
  GOPATH: ${{ github.workspace }}/go

jobs:
  doc_unit:
    uses: ./.github/workflows/_test_unit.yml
    with:
      packages: cmd/werf/docs

  doc_integration:
    uses: ./.github/workflows/_test_integration_regular.yml
    with:
      packages: integration/suites/docs

  check_broken_links:
    runs-on: ubuntu-latest-4-cores
    timeout-minutes: 60
    steps:
      - name: Install werf build dependencies
        run: sudo apt-get install -y libbtrfs-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          cache: true
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check links
        run: task -o group -p doc:check-broken-links
        env:
          WERF_REPO: "ghcr.io/${{ github.repository_owner }}/werfio"

  notify:
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.draft == false && failure()) ||
      (github.event_name != 'pull_request' && failure())
    needs:
      - doc_unit
      - doc_integration
      - check_broken_links
    uses: ./.github/workflows/_notification.yml
    secrets:
      mentionGroupID: ${{ secrets.SLACK_MENTION_GROUP_ID }}
      webhook: ${{ secrets.SLACK_WEBHOOK }}
