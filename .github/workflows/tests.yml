name: Tests
on:
  pull_request:
    types: [labeled]
  repository_dispatch:
    types: [tests]
env:
  GO111MODULE: on

jobs:

  unlabel:
    name: Label taking off
    if: github.event_name == 'pull_request' && github.event.label.name == 'run tests'
    runs-on: ubuntu-latest
    steps:

    - uses: actions/github-script@v1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: >
          github.issues.removeLabel({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: '${{ github.event.label.name }}'
          })

  unit_tests:
    name: Unit tests
    if: github.event_name == 'repository_dispatch' || (github.event_name == 'pull_request' && github.event.label.name == 'run tests')
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

      - name: Install werf build dependencies
        run: sudo apt-get install -y libbtrfs-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
        id: go

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Prepare environment
        run: ./scripts/ci/git.sh
        shell: bash

      - name: Test
        run: ./scripts/ci/go-test.sh ./pkg/... ./cmd/...
        shell: bash

  precompiled_tests_binaries:
    name: Precompiled tests binaries
    if: github.event_name == 'repository_dispatch' || (github.event_name == 'pull_request' && github.event.label.name == 'run tests')
    runs-on: ubuntu-latest
    steps:

    - name: Install werf build dependencies
      run: sudo apt-get install -y libbtrfs-dev

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Compile integration tests binaries
      run: |
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/default ./precompiled_tests_binaries/integration_default
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/k8s_per_version ./precompiled_tests_binaries/integration_k8s_per_version
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/container_registry_per_implementation ./precompiled_tests_binaries/integration_container_registry_per_implementation
        ./scripts/tests/precompiled_tests_binaries.sh ./integration/ci_suites/k8s_per_version_and_container_registry_per_implementation ./precompiled_tests_binaries/integration_k8s_per_version_and_container_registry_per_implementation
      shell: bash

    - name: Compile tests werf binary
      run: GOBIN=$PWD make werf

    - name: Upload integration default tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "ubuntu_integration_default_tests_binaries"
        path: precompiled_tests_binaries/integration_default

    - name: Upload integration k8s_per_version tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "ubuntu_integration_k8s_per_version_tests_binaries"
        path: precompiled_tests_binaries/integration_k8s_per_version

    - name: Upload integration container_registry_per_implementation tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "ubuntu_integration_container_registry_per_implementation_tests_binaries"
        path: precompiled_tests_binaries/integration_container_registry_per_implementation

    - name: Upload integration k8s_per_version_and_container_registry_per_implementation tests binaries
      uses: actions/upload-artifact@master
      with:
        name: "ubuntu_integration_k8s_per_version_and_container_registry_per_implementation_tests_binaries"
        path: precompiled_tests_binaries/integration_k8s_per_version_and_container_registry_per_implementation

    - name: Upload werf binary
      uses: actions/upload-artifact@master
      with:
        name: "ubuntu_werf_binary"
        path: werf

  integration_default_tests:
    name: Integration default tests
    needs: precompiled_tests_binaries
    strategy:
      fail-fast: false
      matrix:
        extra-find-args:
        - "-name 'git.test'"
        - "-name 'ansible.test'"
        - "! -name 'git.test' ! -name 'ansible.test'"
    runs-on: ubuntu-latest
    steps:

    - name: Install werf build dependencies
      run: sudo apt-get install -y libbtrfs-dev

    - name: Checkout code
      uses: actions/checkout@v3
      if: matrix.extra-find-args != '! -name ''git.test'' ! -name ''ansible.test'''

    - name: Checkout code (git history as fixtures for tests)
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      if: matrix.extra-find-args == '! -name ''git.test'' ! -name ''ansible.test'''

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration default tests binaries
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_integration_default_tests_binaries"
        path: .

    - name: Download werf binary
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_werf_binary"
        path: .

    - name: Prepare environment
      run: |
        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo@latest

        chmod +x werf
        find integration -type f -name '*.test' -exec chmod +x {} \;
      shell: bash

    - name: Test
      run: |
        test_binaries=$(find integration -type f -name '*.test' ${{ matrix.extra-find-args }})
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf ginkgo -p -keepGoing $test_binaries
      shell: bash

  integration_k8s_per_version_tests:
    name: Integration k8s per version tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [1.19]
    runs-on: ubuntu-latest
    steps:

    - name: Install werf build dependencies
      run: sudo apt-get install -y libbtrfs-dev

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration k8s_per_version tests binaries
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_integration_k8s_per_version_tests_binaries"
        path: .

    - name: Download werf binary
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_werf_binary"
        path: .

    - name: Prepare environment
      run: |
        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo@latest

        find integration -type f -name '*.test' -exec chmod +x {} \;

        chmod +x werf

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f -name '*.test')
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf ginkgo -p -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

  integration_k8s_per_version_and_container_registry_per_implementation_tests:
    name: Integration k8s_per_version_and_container_registry_per_implementation tests
    needs: precompiled_tests_binaries
    if: ${{ success() || failure() }}
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [1.19]
    runs-on: ubuntu-latest
    env:
      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ACR: 1
      WERF_TEST_ACR_PASSWORD: ${{ secrets.WERF_TEST_ACR_PASSWORD }}
      WERF_TEST_ACR_REGISTRY: ${{ secrets.WERF_TEST_ACR_REGISTRY }}
      WERF_TEST_ACR_USERNAME: ${{ secrets.WERF_TEST_ACR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DEFAULT: 1
      WERF_TEST_DEFAULT_PASSWORD: ${{ secrets.WERF_TEST_DEFAULT_PASSWORD }}
      WERF_TEST_DEFAULT_REGISTRY: ${{ secrets.WERF_TEST_DEFAULT_REGISTRY }}
      WERF_TEST_DEFAULT_USERNAME: ${{ secrets.WERF_TEST_DEFAULT_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_DOCKERHUB: 1
      WERF_TEST_DOCKERHUB_PASSWORD: ${{ secrets.WERF_TEST_DOCKERHUB_PASSWORD }}
      WERF_TEST_DOCKERHUB_REGISTRY: ${{ secrets.WERF_TEST_DOCKERHUB_REGISTRY }}
      WERF_TEST_DOCKERHUB_USERNAME: ${{ secrets.WERF_TEST_DOCKERHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_ECR: 1
      WERF_TEST_ECR_REGISTRY: ${{ secrets.WERF_TEST_ECR_REGISTRY }}
      WERF_TEST_ECR_PASSWORD: ${{ secrets.WERF_TEST_ECR_PASSWORD }}
      WERF_TEST_ECR_USERNAME: ${{ secrets.WERF_TEST_ECR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GCR: 1
      WERF_TEST_GCR_BASE64_CONFIG: ${{ secrets.WERF_TEST_GCR_BASE64_CONFIG }}
      WERF_TEST_GCR_REGISTRY: ${{ secrets.WERF_TEST_GCR_REGISTRY }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_GITHUB: 1
      WERF_TEST_GITHUB_PASSWORD: ${{ secrets.WERF_TEST_GITHUB_PASSWORD }}
      WERF_TEST_GITHUB_REGISTRY: ${{ secrets.WERF_TEST_GITHUB_REGISTRY }}
      WERF_TEST_GITHUB_TOKEN: ${{ secrets.WERF_TEST_GITHUB_TOKEN }}
      WERF_TEST_GITHUB_USERNAME: ${{ secrets.WERF_TEST_GITHUB_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_HARBOR: 1
      WERF_TEST_HARBOR_PASSWORD: ${{ secrets.WERF_TEST_HARBOR_PASSWORD }}
      WERF_TEST_HARBOR_REGISTRY: ${{ secrets.WERF_TEST_HARBOR_REGISTRY }}
      WERF_TEST_HARBOR_USERNAME: ${{ secrets.WERF_TEST_HARBOR_USERNAME }}

      WERF_TEST_DOCKER_REGISTRY_IMPLEMENTATION_QUAY: 0
      WERF_TEST_QUAY_PASSWORD: ${{ secrets.WERF_TEST_QUAY_PASSWORD }}
      WERF_TEST_QUAY_REGISTRY: ${{ secrets.WERF_TEST_QUAY_REGISTRY }}
      WERF_TEST_QUAY_TOKEN: ${{ secrets.WERF_TEST_QUAY_TOKEN }}
      WERF_TEST_QUAY_USERNAME: ${{ secrets.WERF_TEST_QUAY_USERNAME }}
    steps:

    - name: Install werf build dependencies
      run: sudo apt-get install -y libbtrfs-dev

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version-file: go.mod
      id: go

    - name: Download integration k8s_per_version_and_container_registry_per_implementation tests binaries
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_integration_k8s_per_version_and_container_registry_per_implementation_tests_binaries"
        path: .

    - name: Download werf binary
      uses: actions/download-artifact@master
      with:
        name: "ubuntu_werf_binary"
        path: .

    - name: Login (acr)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login (ecr)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Prepare environment
      run: |
        ./scripts/ci/git.sh
        ./scripts/ci/integration_tests_registries_login.sh default
        ./scripts/ci/integration_tests_registries_login.sh acr
        ./scripts/ci/integration_tests_registries_login.sh dockerhub
        ./scripts/ci/integration_tests_registries_login.sh ecr
        ./scripts/ci/integration_tests_registries_login.sh gcr
        ./scripts/ci/integration_tests_registries_login.sh harbor
        ./scripts/ci/integration_tests_registries_login.sh quay
        ./scripts/ci/integration_tests_registries_login.sh github

        go install github.com/onsi/ginkgo/ginkgo@latest

        find integration -type f -name '*.test' -exec chmod +x {} \;

        chmod +x werf

        echo WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _)) >> $GITHUB_ENV
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_19: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_19 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        test_binaries=$(find integration -type f -name '*.test')
        WERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/werf ginkgo -p --flakeAttempts=3 -keepGoing $test_binaries
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}
