name: xxxxx(internal)

on:
  workflow_call:
    inputs:
      scope:
        required: true
        type: string
      packages:
        description: Comma-separated package paths to test
        type: string
      excludePackages:
        description: Comma-separated package paths to exclude from testing
        type: string
      k8sMajor:
        default: 1
        type: string
      k8sMinor:
        default: 29
        type: string
      coverage:
        default: false
        type: string
      forceSkip:
        default: false
        type: string

defaults:
  run:
    shell: bash

env:
  DEBIAN_FRONTEND: "noninteractive"
  WERF_TEST_K8S_DOCKER_REGISTRY_INSECURE: "false"

jobs:
  _:
    if: inputs.forceSkip == 'false'
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libbtrfs-dev buildah qemu-user qemu-user-binfmt

      - name: Prepare system for multiarch builds
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          cache: true
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up prebuilt werf test binary
        uses: ./.github/actions/set-up-prebuilt-werf-test-binary
        with:
          coverage: ${{ inputs.coverage }}

      - name: Set up git config
        uses: ./.github/actions/set-up-git-config

      - name: Install ginkgo
        run: task -p deps:install:ginkgo

      - name: Setup environment
        run: task test:setup:environment

      - name: Test
        run: |
          export WERF_TEST_K8S_DOCKER_REGISTRY="localhost:$(docker inspect kind-registry --format '{{(index (index .NetworkSettings.Ports "5000/tcp") 0).HostPort}}')"
          test -n "${{ inputs.packages }}" && paths=paths="$(echo ${{ inputs.packages }} | tr , ' ')"
          task -p test:e2e:${{ inputs.scope }} $paths -- --keep-going --skip-package '${{ inputs.excludePackages }}'
          echo loadavg: $(cat /proc/loadavg)
        env:
          GOCOVERDIR: ${{ env.WERF_TEST_COVER_DIR }}

      - name: Upload coverage artifact
        uses: ./.github/actions/upload-coverage-artifact
        with:
          coverage: ${{ inputs.coverage }}

      - name: Cleanup environment
        if: always()
        run: task test:cleanup:environment
