// Code generated by "enumer -type=SourceType -trimprefix=SourceType -transform=lower -output=./scan_command_source_type_enumer.go"; DO NOT EDIT.

package scanner

import (
	"fmt"
	"strings"
)

const _SourceTypeName = "dockerregistrydir"

var _SourceTypeIndex = [...]uint8{0, 6, 14, 17}

const _SourceTypeLowerName = "dockerregistrydir"

func (i SourceType) String() string {
	if i >= SourceType(len(_SourceTypeIndex)-1) {
		return fmt.Sprintf("SourceType(%d)", i)
	}
	return _SourceTypeName[_SourceTypeIndex[i]:_SourceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SourceTypeNoOp() {
	var x [1]struct{}
	_ = x[SourceTypeDocker-(0)]
	_ = x[SourceTypeRegistry-(1)]
	_ = x[SourceTypeDir-(2)]
}

var _SourceTypeValues = []SourceType{SourceTypeDocker, SourceTypeRegistry, SourceTypeDir}

var _SourceTypeNameToValueMap = map[string]SourceType{
	_SourceTypeName[0:6]:        SourceTypeDocker,
	_SourceTypeLowerName[0:6]:   SourceTypeDocker,
	_SourceTypeName[6:14]:       SourceTypeRegistry,
	_SourceTypeLowerName[6:14]:  SourceTypeRegistry,
	_SourceTypeName[14:17]:      SourceTypeDir,
	_SourceTypeLowerName[14:17]: SourceTypeDir,
}

var _SourceTypeNames = []string{
	_SourceTypeName[0:6],
	_SourceTypeName[6:14],
	_SourceTypeName[14:17],
}

// SourceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SourceTypeString(s string) (SourceType, error) {
	if val, ok := _SourceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SourceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SourceType values", s)
}

// SourceTypeValues returns all values of the enum
func SourceTypeValues() []SourceType {
	return _SourceTypeValues
}

// SourceTypeStrings returns a slice of all String values of the enum
func SourceTypeStrings() []string {
	strs := make([]string, len(_SourceTypeNames))
	copy(strs, _SourceTypeNames)
	return strs
}

// IsASourceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SourceType) IsASourceType() bool {
	for _, v := range _SourceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
