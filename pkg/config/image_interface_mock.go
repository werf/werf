// Code generated by MockGen. DO NOT EDIT.
// Source: image_interface.go
//
// Generated by this command:
//
//	mockgen -source image_interface.go -package config -destination image_interface_mock.go
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageInterface is a mock of ImageInterface interface.
type MockImageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageInterfaceMockRecorder
	isgomock struct{}
}

// MockImageInterfaceMockRecorder is the mock recorder for MockImageInterface.
type MockImageInterfaceMockRecorder struct {
	mock *MockImageInterface
}

// NewMockImageInterface creates a new mock instance.
func NewMockImageInterface(ctrl *gomock.Controller) *MockImageInterface {
	mock := &MockImageInterface{ctrl: ctrl}
	mock.recorder = &MockImageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageInterface) EXPECT() *MockImageInterfaceMockRecorder {
	return m.recorder
}

// CacheVersion mocks base method.
func (m *MockImageInterface) CacheVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// CacheVersion indicates an expected call of CacheVersion.
func (mr *MockImageInterfaceMockRecorder) CacheVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheVersion", reflect.TypeOf((*MockImageInterface)(nil).CacheVersion))
}

// GetFrom mocks base method.
func (m *MockImageInterface) GetFrom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockImageInterfaceMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockImageInterface)(nil).GetFrom))
}

// GetName mocks base method.
func (m *MockImageInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockImageInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockImageInterface)(nil).GetName))
}

// IsFinal mocks base method.
func (m *MockImageInterface) IsFinal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFinal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinal indicates an expected call of IsFinal.
func (mr *MockImageInterfaceMockRecorder) IsFinal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinal", reflect.TypeOf((*MockImageInterface)(nil).IsFinal))
}

// IsStapel mocks base method.
func (m *MockImageInterface) IsStapel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStapel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStapel indicates an expected call of IsStapel.
func (mr *MockImageInterfaceMockRecorder) IsStapel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStapel", reflect.TypeOf((*MockImageInterface)(nil).IsStapel))
}

// Platform mocks base method.
func (m *MockImageInterface) Platform() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Platform")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Platform indicates an expected call of Platform.
func (mr *MockImageInterfaceMockRecorder) Platform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Platform", reflect.TypeOf((*MockImageInterface)(nil).Platform))
}

// SetFromExternal mocks base method.
func (m *MockImageInterface) SetFromExternal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFromExternal")
}

// SetFromExternal indicates an expected call of SetFromExternal.
func (mr *MockImageInterfaceMockRecorder) SetFromExternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFromExternal", reflect.TypeOf((*MockImageInterface)(nil).SetFromExternal))
}

// dependsOn mocks base method.
func (m *MockImageInterface) dependsOn() DependsOn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dependsOn")
	ret0, _ := ret[0].(DependsOn)
	return ret0
}

// dependsOn indicates an expected call of dependsOn.
func (mr *MockImageInterfaceMockRecorder) dependsOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dependsOn", reflect.TypeOf((*MockImageInterface)(nil).dependsOn))
}

// rawDoc mocks base method.
func (m *MockImageInterface) rawDoc() *doc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rawDoc")
	ret0, _ := ret[0].(*doc)
	return ret0
}

// rawDoc indicates an expected call of rawDoc.
func (mr *MockImageInterfaceMockRecorder) rawDoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rawDoc", reflect.TypeOf((*MockImageInterface)(nil).rawDoc))
}
