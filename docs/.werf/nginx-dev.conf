user  nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 500;
    multi_accept on;
    use epoll;
}

http {
    log_format json_combined escape=json '{ "time_local": "$time_local", '
     '"host": "$host", '
     '"remote_addr": "$remote_addr", '
     '"remote_user": "$remote_user", '
     '"request": "$request", '
     '"status": "$status", '
     '"body_bytes_sent": "$body_bytes_sent", '
     '"request_time": "$request_time", '
     '"http_referrer": "$http_referer", '
     '"http_user_agent": "$http_user_agent" }';

    server_tokens off;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    server_names_hash_bucket_size 64;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    error_log /dev/stderr info;

    gzip off;
    ssi on;

    # It is required to resolve domains in variables. (Error 'no resolver defined to resolve SOMENAME' occurs if no resolver defined).
    resolver 127.0.0.11 valid=1s;

    map $http_host $lang {
      default "en";
      ~^ru\..+$ "ru";
    }

    map $lang $werfio_host {
      default "werf.io";
      "ru" "ru.werf.io";
    }

    server {
        charset utf-8;
        listen 80;
        server_name _;
        expires 1h;

        index       index.html;

        set_real_ip_from  0.0.0.0/0;
        access_log       /dev/stdout json_combined;
        error_log        /dev/stderr info;

        location = /healthz {
            access_log  off;
            add_header Content-Type text/plain;
            return 200;
        }

        rewrite ^/documentation/(v[\d]+\.[\d]+[^\/]*)$ /documentation/$1/;

        location /documentation/ {
            rewrite ^/documentation(/v[\d]+\.[^\/]+)?/(.*) /$2 break;
            proxy_pass http://$lang;
         }

        location / {
            proxy_redirect    off;
            proxy_set_header  Host              $werfio_host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Original-URI    $request_uri;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;

            proxy_pass https://$werfio_host;
        }

        error_page 403 404 /404.html;
    }
}
