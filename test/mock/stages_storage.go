// Code generated by MockGen. DO NOT EDIT.
// Source: stages_storage.go
//
// Generated by this command:
//
//	mockgen -source stages_storage.go -package mock -destination ../../test/mock/stages_storage.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/google/go-containerregistry/pkg/v1"
	gomock "go.uber.org/mock/gomock"

	container_backend "github.com/werf/werf/v2/pkg/container_backend"
	image "github.com/werf/werf/v2/pkg/image"
	storage "github.com/werf/werf/v2/pkg/storage"
)

// MockStagesStorage is a mock of StagesStorage interface.
type MockStagesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStagesStorageMockRecorder
	isgomock struct{}
}

// MockStagesStorageMockRecorder is the mock recorder for MockStagesStorage.
type MockStagesStorageMockRecorder struct {
	mock *MockStagesStorage
}

// NewMockStagesStorage creates a new mock instance.
func NewMockStagesStorage(ctrl *gomock.Controller) *MockStagesStorage {
	mock := &MockStagesStorage{ctrl: ctrl}
	mock.recorder = &MockStagesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStagesStorage) EXPECT() *MockStagesStorageMockRecorder {
	return m.recorder
}

// AddManagedImage mocks base method.
func (m *MockStagesStorage) AddManagedImage(ctx context.Context, projectName, imageNameOrManagedImageName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddManagedImage", ctx, projectName, imageNameOrManagedImageName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddManagedImage indicates an expected call of AddManagedImage.
func (mr *MockStagesStorageMockRecorder) AddManagedImage(ctx, projectName, imageNameOrManagedImageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManagedImage", reflect.TypeOf((*MockStagesStorage)(nil).AddManagedImage), ctx, projectName, imageNameOrManagedImageName)
}

// AddStageCustomTag mocks base method.
func (m *MockStagesStorage) AddStageCustomTag(ctx context.Context, stageDesc *image.StageDesc, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStageCustomTag", ctx, stageDesc, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStageCustomTag indicates an expected call of AddStageCustomTag.
func (mr *MockStagesStorageMockRecorder) AddStageCustomTag(ctx, stageDesc, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStageCustomTag", reflect.TypeOf((*MockStagesStorage)(nil).AddStageCustomTag), ctx, stageDesc, tag)
}

// Address mocks base method.
func (m *MockStagesStorage) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockStagesStorageMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockStagesStorage)(nil).Address))
}

// CheckStageCustomTag mocks base method.
func (m *MockStagesStorage) CheckStageCustomTag(ctx context.Context, stageDesc *image.StageDesc, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStageCustomTag", ctx, stageDesc, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckStageCustomTag indicates an expected call of CheckStageCustomTag.
func (mr *MockStagesStorageMockRecorder) CheckStageCustomTag(ctx, stageDesc, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStageCustomTag", reflect.TypeOf((*MockStagesStorage)(nil).CheckStageCustomTag), ctx, stageDesc, tag)
}

// ConstructStageImageName mocks base method.
func (m *MockStagesStorage) ConstructStageImageName(projectName, digest string, creationTs int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructStageImageName", projectName, digest, creationTs)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConstructStageImageName indicates an expected call of ConstructStageImageName.
func (mr *MockStagesStorageMockRecorder) ConstructStageImageName(projectName, digest, creationTs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructStageImageName", reflect.TypeOf((*MockStagesStorage)(nil).ConstructStageImageName), projectName, digest, creationTs)
}

// CopyFromStorage mocks base method.
func (m *MockStagesStorage) CopyFromStorage(ctx context.Context, src storage.StagesStorage, projectName string, stageID image.StageID, opts storage.CopyFromStorageOptions) (*image.StageDesc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromStorage", ctx, src, projectName, stageID, opts)
	ret0, _ := ret[0].(*image.StageDesc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromStorage indicates an expected call of CopyFromStorage.
func (mr *MockStagesStorageMockRecorder) CopyFromStorage(ctx, src, projectName, stageID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromStorage", reflect.TypeOf((*MockStagesStorage)(nil).CopyFromStorage), ctx, src, projectName, stageID, opts)
}

// CreateRepo mocks base method.
func (m *MockStagesStorage) CreateRepo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockStagesStorageMockRecorder) CreateRepo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockStagesStorage)(nil).CreateRepo), ctx)
}

// DeleteRepo mocks base method.
func (m *MockStagesStorage) DeleteRepo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockStagesStorageMockRecorder) DeleteRepo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockStagesStorage)(nil).DeleteRepo), ctx)
}

// DeleteStage mocks base method.
func (m *MockStagesStorage) DeleteStage(ctx context.Context, stageDesc *image.StageDesc, options storage.DeleteImageOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStage", ctx, stageDesc, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStage indicates an expected call of DeleteStage.
func (mr *MockStagesStorageMockRecorder) DeleteStage(ctx, stageDesc, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStage", reflect.TypeOf((*MockStagesStorage)(nil).DeleteStage), ctx, stageDesc, options)
}

// DeleteStageCustomTag mocks base method.
func (m *MockStagesStorage) DeleteStageCustomTag(ctx context.Context, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStageCustomTag", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStageCustomTag indicates an expected call of DeleteStageCustomTag.
func (mr *MockStagesStorageMockRecorder) DeleteStageCustomTag(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageCustomTag", reflect.TypeOf((*MockStagesStorage)(nil).DeleteStageCustomTag), ctx, tag)
}

// ExportStage mocks base method.
func (m *MockStagesStorage) ExportStage(ctx context.Context, stageDesc *image.StageDesc, destinationReference string, mutateConfigFunc func(v1.Config) (v1.Config, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportStage", ctx, stageDesc, destinationReference, mutateConfigFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportStage indicates an expected call of ExportStage.
func (mr *MockStagesStorageMockRecorder) ExportStage(ctx, stageDesc, destinationReference, mutateConfigFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportStage", reflect.TypeOf((*MockStagesStorage)(nil).ExportStage), ctx, stageDesc, destinationReference, mutateConfigFunc)
}

// FetchImage mocks base method.
func (m *MockStagesStorage) FetchImage(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchImage", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchImage indicates an expected call of FetchImage.
func (mr *MockStagesStorageMockRecorder) FetchImage(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImage", reflect.TypeOf((*MockStagesStorage)(nil).FetchImage), ctx, img)
}

// FilterStageDescSetAndProcessRelatedData mocks base method.
func (m *MockStagesStorage) FilterStageDescSetAndProcessRelatedData(ctx context.Context, stageDescSet image.StageDescSet, options storage.FilterStagesAndProcessRelatedDataOptions) (image.StageDescSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStageDescSetAndProcessRelatedData", ctx, stageDescSet, options)
	ret0, _ := ret[0].(image.StageDescSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStageDescSetAndProcessRelatedData indicates an expected call of FilterStageDescSetAndProcessRelatedData.
func (mr *MockStagesStorageMockRecorder) FilterStageDescSetAndProcessRelatedData(ctx, stageDescSet, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStageDescSetAndProcessRelatedData", reflect.TypeOf((*MockStagesStorage)(nil).FilterStageDescSetAndProcessRelatedData), ctx, stageDescSet, options)
}

// GetAllAndGroupImageMetadataByImageName mocks base method.
func (m *MockStagesStorage) GetAllAndGroupImageMetadataByImageName(ctx context.Context, projectName string, imageNameOrManagedImageList []string, opts ...storage.Option) (map[string]map[string][]string, map[string]map[string][]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, imageNameOrManagedImageList}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllAndGroupImageMetadataByImageName", varargs...)
	ret0, _ := ret[0].(map[string]map[string][]string)
	ret1, _ := ret[1].(map[string]map[string][]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllAndGroupImageMetadataByImageName indicates an expected call of GetAllAndGroupImageMetadataByImageName.
func (mr *MockStagesStorageMockRecorder) GetAllAndGroupImageMetadataByImageName(ctx, projectName, imageNameOrManagedImageList any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, imageNameOrManagedImageList}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAndGroupImageMetadataByImageName", reflect.TypeOf((*MockStagesStorage)(nil).GetAllAndGroupImageMetadataByImageName), varargs...)
}

// GetClientIDRecords mocks base method.
func (m *MockStagesStorage) GetClientIDRecords(ctx context.Context, projectName string, opts ...storage.Option) ([]*storage.ClientIDRecord, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientIDRecords", varargs...)
	ret0, _ := ret[0].([]*storage.ClientIDRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientIDRecords indicates an expected call of GetClientIDRecords.
func (mr *MockStagesStorageMockRecorder) GetClientIDRecords(ctx, projectName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIDRecords", reflect.TypeOf((*MockStagesStorage)(nil).GetClientIDRecords), varargs...)
}

// GetImportMetadata mocks base method.
func (m *MockStagesStorage) GetImportMetadata(ctx context.Context, projectName, id string) (*storage.ImportMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportMetadata", ctx, projectName, id)
	ret0, _ := ret[0].(*storage.ImportMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportMetadata indicates an expected call of GetImportMetadata.
func (mr *MockStagesStorageMockRecorder) GetImportMetadata(ctx, projectName, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportMetadata", reflect.TypeOf((*MockStagesStorage)(nil).GetImportMetadata), ctx, projectName, id)
}

// GetImportMetadataIDs mocks base method.
func (m *MockStagesStorage) GetImportMetadataIDs(ctx context.Context, projectName string, opts ...storage.Option) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImportMetadataIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportMetadataIDs indicates an expected call of GetImportMetadataIDs.
func (mr *MockStagesStorageMockRecorder) GetImportMetadataIDs(ctx, projectName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportMetadataIDs", reflect.TypeOf((*MockStagesStorage)(nil).GetImportMetadataIDs), varargs...)
}

// GetManagedImages mocks base method.
func (m *MockStagesStorage) GetManagedImages(ctx context.Context, projectName string, opts ...storage.Option) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagedImages", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedImages indicates an expected call of GetManagedImages.
func (mr *MockStagesStorageMockRecorder) GetManagedImages(ctx, projectName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedImages", reflect.TypeOf((*MockStagesStorage)(nil).GetManagedImages), varargs...)
}

// GetStageDesc mocks base method.
func (m *MockStagesStorage) GetStageDesc(ctx context.Context, projectName string, stageID image.StageID) (*image.StageDesc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageDesc", ctx, projectName, stageID)
	ret0, _ := ret[0].(*image.StageDesc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageDesc indicates an expected call of GetStageDesc.
func (mr *MockStagesStorageMockRecorder) GetStageDesc(ctx, projectName, stageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageDesc", reflect.TypeOf((*MockStagesStorage)(nil).GetStageDesc), ctx, projectName, stageID)
}

// GetStagesIDs mocks base method.
func (m *MockStagesStorage) GetStagesIDs(ctx context.Context, projectName string, opts ...storage.Option) ([]image.StageID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStagesIDs", varargs...)
	ret0, _ := ret[0].([]image.StageID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesIDs indicates an expected call of GetStagesIDs.
func (mr *MockStagesStorageMockRecorder) GetStagesIDs(ctx, projectName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesIDs", reflect.TypeOf((*MockStagesStorage)(nil).GetStagesIDs), varargs...)
}

// GetStagesIDsByDigest mocks base method.
func (m *MockStagesStorage) GetStagesIDsByDigest(ctx context.Context, projectName, digest string, parentStageCreationTs int64, opts ...storage.Option) ([]image.StageID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, digest, parentStageCreationTs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStagesIDsByDigest", varargs...)
	ret0, _ := ret[0].([]image.StageID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesIDsByDigest indicates an expected call of GetStagesIDsByDigest.
func (mr *MockStagesStorageMockRecorder) GetStagesIDsByDigest(ctx, projectName, digest, parentStageCreationTs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, digest, parentStageCreationTs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesIDsByDigest", reflect.TypeOf((*MockStagesStorage)(nil).GetStagesIDsByDigest), varargs...)
}

// GetSyncServerRecords mocks base method.
func (m *MockStagesStorage) GetSyncServerRecords(ctx context.Context, projectName string, opts ...storage.Option) ([]*storage.SyncServerRecord, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncServerRecords", varargs...)
	ret0, _ := ret[0].([]*storage.SyncServerRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncServerRecords indicates an expected call of GetSyncServerRecords.
func (mr *MockStagesStorageMockRecorder) GetSyncServerRecords(ctx, projectName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncServerRecords", reflect.TypeOf((*MockStagesStorage)(nil).GetSyncServerRecords), varargs...)
}

// IsImageMetadataExist mocks base method.
func (m *MockStagesStorage) IsImageMetadataExist(ctx context.Context, projectName, imageNameOrManagedImageName, commit, stageID string, opts ...storage.Option) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, imageNameOrManagedImageName, commit, stageID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsImageMetadataExist", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImageMetadataExist indicates an expected call of IsImageMetadataExist.
func (mr *MockStagesStorageMockRecorder) IsImageMetadataExist(ctx, projectName, imageNameOrManagedImageName, commit, stageID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, imageNameOrManagedImageName, commit, stageID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImageMetadataExist", reflect.TypeOf((*MockStagesStorage)(nil).IsImageMetadataExist), varargs...)
}

// IsManagedImageExist mocks base method.
func (m *MockStagesStorage) IsManagedImageExist(ctx context.Context, projectName, imageNameOrManagedImageName string, opts ...storage.Option) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectName, imageNameOrManagedImageName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsManagedImageExist", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsManagedImageExist indicates an expected call of IsManagedImageExist.
func (mr *MockStagesStorageMockRecorder) IsManagedImageExist(ctx, projectName, imageNameOrManagedImageName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectName, imageNameOrManagedImageName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsManagedImageExist", reflect.TypeOf((*MockStagesStorage)(nil).IsManagedImageExist), varargs...)
}

// PostClientIDRecord mocks base method.
func (m *MockStagesStorage) PostClientIDRecord(ctx context.Context, projectName string, rec *storage.ClientIDRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostClientIDRecord", ctx, projectName, rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostClientIDRecord indicates an expected call of PostClientIDRecord.
func (mr *MockStagesStorageMockRecorder) PostClientIDRecord(ctx, projectName, rec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostClientIDRecord", reflect.TypeOf((*MockStagesStorage)(nil).PostClientIDRecord), ctx, projectName, rec)
}

// PostMultiplatformImage mocks base method.
func (m *MockStagesStorage) PostMultiplatformImage(ctx context.Context, projectName, tag string, allPlatformsImages []*image.Info, platforms []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMultiplatformImage", ctx, projectName, tag, allPlatformsImages, platforms)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMultiplatformImage indicates an expected call of PostMultiplatformImage.
func (mr *MockStagesStorageMockRecorder) PostMultiplatformImage(ctx, projectName, tag, allPlatformsImages, platforms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMultiplatformImage", reflect.TypeOf((*MockStagesStorage)(nil).PostMultiplatformImage), ctx, projectName, tag, allPlatformsImages, platforms)
}

// PostSyncServerRecord mocks base method.
func (m *MockStagesStorage) PostSyncServerRecord(ctx context.Context, projectName string, rec *storage.SyncServerRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostSyncServerRecord", ctx, projectName, rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostSyncServerRecord indicates an expected call of PostSyncServerRecord.
func (mr *MockStagesStorageMockRecorder) PostSyncServerRecord(ctx, projectName, rec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSyncServerRecord", reflect.TypeOf((*MockStagesStorage)(nil).PostSyncServerRecord), ctx, projectName, rec)
}

// PullIfExistSbomImage mocks base method.
func (m *MockStagesStorage) PullIfExistSbomImage(ctx context.Context, imageName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIfExistSbomImage", ctx, imageName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIfExistSbomImage indicates an expected call of PullIfExistSbomImage.
func (mr *MockStagesStorageMockRecorder) PullIfExistSbomImage(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIfExistSbomImage", reflect.TypeOf((*MockStagesStorage)(nil).PullIfExistSbomImage), ctx, imageName)
}

// PushIfNotExistSbomImage mocks base method.
func (m *MockStagesStorage) PushIfNotExistSbomImage(ctx context.Context, imageName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushIfNotExistSbomImage", ctx, imageName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushIfNotExistSbomImage indicates an expected call of PushIfNotExistSbomImage.
func (mr *MockStagesStorageMockRecorder) PushIfNotExistSbomImage(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushIfNotExistSbomImage", reflect.TypeOf((*MockStagesStorage)(nil).PushIfNotExistSbomImage), ctx, imageName)
}

// PutImageMetadata mocks base method.
func (m *MockStagesStorage) PutImageMetadata(ctx context.Context, projectName, imageNameOrManagedImageName, commit, stageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImageMetadata", ctx, projectName, imageNameOrManagedImageName, commit, stageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutImageMetadata indicates an expected call of PutImageMetadata.
func (mr *MockStagesStorageMockRecorder) PutImageMetadata(ctx, projectName, imageNameOrManagedImageName, commit, stageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImageMetadata", reflect.TypeOf((*MockStagesStorage)(nil).PutImageMetadata), ctx, projectName, imageNameOrManagedImageName, commit, stageID)
}

// PutImportMetadata mocks base method.
func (m *MockStagesStorage) PutImportMetadata(ctx context.Context, projectName string, metadata *storage.ImportMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImportMetadata", ctx, projectName, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutImportMetadata indicates an expected call of PutImportMetadata.
func (mr *MockStagesStorageMockRecorder) PutImportMetadata(ctx, projectName, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImportMetadata", reflect.TypeOf((*MockStagesStorage)(nil).PutImportMetadata), ctx, projectName, metadata)
}

// RejectStage mocks base method.
func (m *MockStagesStorage) RejectStage(ctx context.Context, projectName, digest string, creationTs int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectStage", ctx, projectName, digest, creationTs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectStage indicates an expected call of RejectStage.
func (mr *MockStagesStorageMockRecorder) RejectStage(ctx, projectName, digest, creationTs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectStage", reflect.TypeOf((*MockStagesStorage)(nil).RejectStage), ctx, projectName, digest, creationTs)
}

// RmImageMetadata mocks base method.
func (m *MockStagesStorage) RmImageMetadata(ctx context.Context, projectName, imageNameOrManagedImageNameOrImageMetadataID, commit, stageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RmImageMetadata", ctx, projectName, imageNameOrManagedImageNameOrImageMetadataID, commit, stageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RmImageMetadata indicates an expected call of RmImageMetadata.
func (mr *MockStagesStorageMockRecorder) RmImageMetadata(ctx, projectName, imageNameOrManagedImageNameOrImageMetadataID, commit, stageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmImageMetadata", reflect.TypeOf((*MockStagesStorage)(nil).RmImageMetadata), ctx, projectName, imageNameOrManagedImageNameOrImageMetadataID, commit, stageID)
}

// RmImportMetadata mocks base method.
func (m *MockStagesStorage) RmImportMetadata(ctx context.Context, projectName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RmImportMetadata", ctx, projectName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RmImportMetadata indicates an expected call of RmImportMetadata.
func (mr *MockStagesStorageMockRecorder) RmImportMetadata(ctx, projectName, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmImportMetadata", reflect.TypeOf((*MockStagesStorage)(nil).RmImportMetadata), ctx, projectName, id)
}

// RmManagedImage mocks base method.
func (m *MockStagesStorage) RmManagedImage(ctx context.Context, projectName, imageNameOrManagedImageName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RmManagedImage", ctx, projectName, imageNameOrManagedImageName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RmManagedImage indicates an expected call of RmManagedImage.
func (mr *MockStagesStorageMockRecorder) RmManagedImage(ctx, projectName, imageNameOrManagedImageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmManagedImage", reflect.TypeOf((*MockStagesStorage)(nil).RmManagedImage), ctx, projectName, imageNameOrManagedImageName)
}

// ShouldFetchImage mocks base method.
func (m *MockStagesStorage) ShouldFetchImage(ctx context.Context, img container_backend.LegacyImageInterface) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldFetchImage", ctx, img)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldFetchImage indicates an expected call of ShouldFetchImage.
func (mr *MockStagesStorageMockRecorder) ShouldFetchImage(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldFetchImage", reflect.TypeOf((*MockStagesStorage)(nil).ShouldFetchImage), ctx, img)
}

// StoreImage mocks base method.
func (m *MockStagesStorage) StoreImage(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImage", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImage indicates an expected call of StoreImage.
func (mr *MockStagesStorageMockRecorder) StoreImage(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImage", reflect.TypeOf((*MockStagesStorage)(nil).StoreImage), ctx, img)
}

// String mocks base method.
func (m *MockStagesStorage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStagesStorageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStagesStorage)(nil).String))
}
