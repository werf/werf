// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -package mock -destination ../../test/mock/path_matcher.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPathMatcher is a mock of PathMatcher interface.
type MockPathMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPathMatcherMockRecorder
	isgomock struct{}
}

// MockPathMatcherMockRecorder is the mock recorder for MockPathMatcher.
type MockPathMatcherMockRecorder struct {
	mock *MockPathMatcher
}

// NewMockPathMatcher creates a new mock instance.
func NewMockPathMatcher(ctrl *gomock.Controller) *MockPathMatcher {
	mock := &MockPathMatcher{ctrl: ctrl}
	mock.recorder = &MockPathMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMatcher) EXPECT() *MockPathMatcherMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockPathMatcher) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPathMatcherMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPathMatcher)(nil).ID))
}

// IsDirOrSubmodulePathMatched mocks base method.
func (m *MockPathMatcher) IsDirOrSubmodulePathMatched(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirOrSubmodulePathMatched", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirOrSubmodulePathMatched indicates an expected call of IsDirOrSubmodulePathMatched.
func (mr *MockPathMatcherMockRecorder) IsDirOrSubmodulePathMatched(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirOrSubmodulePathMatched", reflect.TypeOf((*MockPathMatcher)(nil).IsDirOrSubmodulePathMatched), arg0)
}

// IsPathMatched mocks base method.
func (m *MockPathMatcher) IsPathMatched(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathMatched", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPathMatched indicates an expected call of IsPathMatched.
func (mr *MockPathMatcherMockRecorder) IsPathMatched(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathMatched", reflect.TypeOf((*MockPathMatcher)(nil).IsPathMatched), arg0)
}

// ShouldGoThrough mocks base method.
func (m *MockPathMatcher) ShouldGoThrough(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldGoThrough", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldGoThrough indicates an expected call of ShouldGoThrough.
func (mr *MockPathMatcherMockRecorder) ShouldGoThrough(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldGoThrough", reflect.TypeOf((*MockPathMatcher)(nil).ShouldGoThrough), arg0)
}

// String mocks base method.
func (m *MockPathMatcher) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPathMatcherMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPathMatcher)(nil).String))
}
