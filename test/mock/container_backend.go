// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -package mock -destination ../../test/mock/container_backend.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	container_backend "github.com/werf/werf/v2/pkg/container_backend"
	info "github.com/werf/werf/v2/pkg/container_backend/info"
	image "github.com/werf/werf/v2/pkg/image"
)

// MockContainerBackend is a mock of ContainerBackend interface.
type MockContainerBackend struct {
	ctrl     *gomock.Controller
	recorder *MockContainerBackendMockRecorder
	isgomock struct{}
}

// MockContainerBackendMockRecorder is the mock recorder for MockContainerBackend.
type MockContainerBackendMockRecorder struct {
	mock *MockContainerBackend
}

// NewMockContainerBackend creates a new mock instance.
func NewMockContainerBackend(ctrl *gomock.Controller) *MockContainerBackend {
	mock := &MockContainerBackend{ctrl: ctrl}
	mock.recorder = &MockContainerBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerBackend) EXPECT() *MockContainerBackendMockRecorder {
	return m.recorder
}

// BuildDockerfile mocks base method.
func (m *MockContainerBackend) BuildDockerfile(ctx context.Context, dockerfile []byte, opts container_backend.BuildDockerfileOpts) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDockerfile", ctx, dockerfile, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDockerfile indicates an expected call of BuildDockerfile.
func (mr *MockContainerBackendMockRecorder) BuildDockerfile(ctx, dockerfile, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDockerfile", reflect.TypeOf((*MockContainerBackend)(nil).BuildDockerfile), ctx, dockerfile, opts)
}

// BuildDockerfileStage mocks base method.
func (m *MockContainerBackend) BuildDockerfileStage(ctx context.Context, baseImage string, opts container_backend.BuildDockerfileStageOptions, instructions ...container_backend.InstructionInterface) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, baseImage, opts}
	for _, a := range instructions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildDockerfileStage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDockerfileStage indicates an expected call of BuildDockerfileStage.
func (mr *MockContainerBackendMockRecorder) BuildDockerfileStage(ctx, baseImage, opts any, instructions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, baseImage, opts}, instructions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDockerfileStage", reflect.TypeOf((*MockContainerBackend)(nil).BuildDockerfileStage), varargs...)
}

// BuildStapelStage mocks base method.
func (m *MockContainerBackend) BuildStapelStage(ctx context.Context, baseImage string, opts container_backend.BuildStapelStageOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStapelStage", ctx, baseImage, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStapelStage indicates an expected call of BuildStapelStage.
func (mr *MockContainerBackendMockRecorder) BuildStapelStage(ctx, baseImage, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStapelStage", reflect.TypeOf((*MockContainerBackend)(nil).BuildStapelStage), ctx, baseImage, opts)
}

// CalculateDependencyImportChecksum mocks base method.
func (m *MockContainerBackend) CalculateDependencyImportChecksum(ctx context.Context, dependencyImport container_backend.DependencyImportSpec, opts container_backend.CalculateDependencyImportChecksum) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDependencyImportChecksum", ctx, dependencyImport, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDependencyImportChecksum indicates an expected call of CalculateDependencyImportChecksum.
func (mr *MockContainerBackendMockRecorder) CalculateDependencyImportChecksum(ctx, dependencyImport, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDependencyImportChecksum", reflect.TypeOf((*MockContainerBackend)(nil).CalculateDependencyImportChecksum), ctx, dependencyImport, opts)
}

// ClaimTargetPlatforms mocks base method.
func (m *MockContainerBackend) ClaimTargetPlatforms(ctx context.Context, targetPlatforms []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClaimTargetPlatforms", ctx, targetPlatforms)
}

// ClaimTargetPlatforms indicates an expected call of ClaimTargetPlatforms.
func (mr *MockContainerBackendMockRecorder) ClaimTargetPlatforms(ctx, targetPlatforms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTargetPlatforms", reflect.TypeOf((*MockContainerBackend)(nil).ClaimTargetPlatforms), ctx, targetPlatforms)
}

// Containers mocks base method.
func (m *MockContainerBackend) Containers(ctx context.Context, opts container_backend.ContainersOptions) (image.ContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers", ctx, opts)
	ret0, _ := ret[0].(image.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Containers indicates an expected call of Containers.
func (mr *MockContainerBackendMockRecorder) Containers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockContainerBackend)(nil).Containers), ctx, opts)
}

// GetDefaultPlatform mocks base method.
func (m *MockContainerBackend) GetDefaultPlatform() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPlatform")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultPlatform indicates an expected call of GetDefaultPlatform.
func (mr *MockContainerBackendMockRecorder) GetDefaultPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPlatform", reflect.TypeOf((*MockContainerBackend)(nil).GetDefaultPlatform))
}

// GetImageInfo mocks base method.
func (m *MockContainerBackend) GetImageInfo(ctx context.Context, ref string, opts container_backend.GetImageInfoOpts) (*image.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageInfo", ctx, ref, opts)
	ret0, _ := ret[0].(*image.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageInfo indicates an expected call of GetImageInfo.
func (mr *MockContainerBackendMockRecorder) GetImageInfo(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageInfo", reflect.TypeOf((*MockContainerBackend)(nil).GetImageInfo), ctx, ref, opts)
}

// GetRuntimePlatform mocks base method.
func (m *MockContainerBackend) GetRuntimePlatform() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimePlatform")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRuntimePlatform indicates an expected call of GetRuntimePlatform.
func (mr *MockContainerBackendMockRecorder) GetRuntimePlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimePlatform", reflect.TypeOf((*MockContainerBackend)(nil).GetRuntimePlatform))
}

// HasStapelBuildSupport mocks base method.
func (m *MockContainerBackend) HasStapelBuildSupport() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStapelBuildSupport")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStapelBuildSupport indicates an expected call of HasStapelBuildSupport.
func (mr *MockContainerBackendMockRecorder) HasStapelBuildSupport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStapelBuildSupport", reflect.TypeOf((*MockContainerBackend)(nil).HasStapelBuildSupport))
}

// Images mocks base method.
func (m *MockContainerBackend) Images(ctx context.Context, opts container_backend.ImagesOptions) (image.ImagesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", ctx, opts)
	ret0, _ := ret[0].(image.ImagesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images.
func (mr *MockContainerBackendMockRecorder) Images(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockContainerBackend)(nil).Images), ctx, opts)
}

// Info mocks base method.
func (m *MockContainerBackend) Info(ctx context.Context) (info.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(info.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockContainerBackendMockRecorder) Info(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockContainerBackend)(nil).Info), ctx)
}

// PostManifest mocks base method.
func (m *MockContainerBackend) PostManifest(ctx context.Context, ref string, opts container_backend.PostManifestOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostManifest", ctx, ref, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostManifest indicates an expected call of PostManifest.
func (mr *MockContainerBackendMockRecorder) PostManifest(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostManifest", reflect.TypeOf((*MockContainerBackend)(nil).PostManifest), ctx, ref, opts)
}

// Pull mocks base method.
func (m *MockContainerBackend) Pull(ctx context.Context, ref string, opts container_backend.PullOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, ref, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockContainerBackendMockRecorder) Pull(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockContainerBackend)(nil).Pull), ctx, ref, opts)
}

// PullImageFromRegistry mocks base method.
func (m *MockContainerBackend) PullImageFromRegistry(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImageFromRegistry", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImageFromRegistry indicates an expected call of PullImageFromRegistry.
func (mr *MockContainerBackendMockRecorder) PullImageFromRegistry(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImageFromRegistry", reflect.TypeOf((*MockContainerBackend)(nil).PullImageFromRegistry), ctx, img)
}

// Push mocks base method.
func (m *MockContainerBackend) Push(ctx context.Context, ref string, opts container_backend.PushOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, ref, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockContainerBackendMockRecorder) Push(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockContainerBackend)(nil).Push), ctx, ref, opts)
}

// RefreshImageObject mocks base method.
func (m *MockContainerBackend) RefreshImageObject(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImageObject", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshImageObject indicates an expected call of RefreshImageObject.
func (mr *MockContainerBackendMockRecorder) RefreshImageObject(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImageObject", reflect.TypeOf((*MockContainerBackend)(nil).RefreshImageObject), ctx, img)
}

// RemoveHostDirs mocks base method.
func (m *MockContainerBackend) RemoveHostDirs(ctx context.Context, mountDir string, dirs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostDirs", ctx, mountDir, dirs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostDirs indicates an expected call of RemoveHostDirs.
func (mr *MockContainerBackendMockRecorder) RemoveHostDirs(ctx, mountDir, dirs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostDirs", reflect.TypeOf((*MockContainerBackend)(nil).RemoveHostDirs), ctx, mountDir, dirs)
}

// RemoveImage mocks base method.
func (m *MockContainerBackend) RemoveImage(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockContainerBackendMockRecorder) RemoveImage(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockContainerBackend)(nil).RemoveImage), ctx, img)
}

// RenameImage mocks base method.
func (m *MockContainerBackend) RenameImage(ctx context.Context, img container_backend.LegacyImageInterface, newImageName string, removeOldName bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImage", ctx, img, newImageName, removeOldName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImage indicates an expected call of RenameImage.
func (mr *MockContainerBackendMockRecorder) RenameImage(ctx, img, newImageName, removeOldName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImage", reflect.TypeOf((*MockContainerBackend)(nil).RenameImage), ctx, img, newImageName, removeOldName)
}

// Rm mocks base method.
func (m *MockContainerBackend) Rm(ctx context.Context, name string, opts container_backend.RmOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rm", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rm indicates an expected call of Rm.
func (mr *MockContainerBackendMockRecorder) Rm(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rm", reflect.TypeOf((*MockContainerBackend)(nil).Rm), ctx, name, opts)
}

// Rmi mocks base method.
func (m *MockContainerBackend) Rmi(ctx context.Context, ref string, opts container_backend.RmiOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rmi", ctx, ref, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rmi indicates an expected call of Rmi.
func (mr *MockContainerBackendMockRecorder) Rmi(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmi", reflect.TypeOf((*MockContainerBackend)(nil).Rmi), ctx, ref, opts)
}

// ShouldCleanupDockerfileImage mocks base method.
func (m *MockContainerBackend) ShouldCleanupDockerfileImage() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldCleanupDockerfileImage")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldCleanupDockerfileImage indicates an expected call of ShouldCleanupDockerfileImage.
func (mr *MockContainerBackendMockRecorder) ShouldCleanupDockerfileImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldCleanupDockerfileImage", reflect.TypeOf((*MockContainerBackend)(nil).ShouldCleanupDockerfileImage))
}

// String mocks base method.
func (m *MockContainerBackend) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockContainerBackendMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockContainerBackend)(nil).String))
}

// Tag mocks base method.
func (m *MockContainerBackend) Tag(ctx context.Context, ref, newRef string, opts container_backend.TagOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", ctx, ref, newRef, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockContainerBackendMockRecorder) Tag(ctx, ref, newRef, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockContainerBackend)(nil).Tag), ctx, ref, newRef, opts)
}

// TagImageByName mocks base method.
func (m *MockContainerBackend) TagImageByName(ctx context.Context, img container_backend.LegacyImageInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagImageByName", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagImageByName indicates an expected call of TagImageByName.
func (mr *MockContainerBackendMockRecorder) TagImageByName(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagImageByName", reflect.TypeOf((*MockContainerBackend)(nil).TagImageByName), ctx, img)
}
