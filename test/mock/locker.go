// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/werf/lockgate (interfaces: Locker)
//
// Generated by this command:
//
//	mockgen -package mock -destination ../../test/mock/locker.go github.com/werf/lockgate Locker
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	lockgate "github.com/werf/lockgate"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
	isgomock struct{}
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockLocker) Acquire(lockName string, opts lockgate.AcquireOptions) (bool, lockgate.LockHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", lockName, opts)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(lockgate.LockHandle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Acquire indicates an expected call of Acquire.
func (mr *MockLockerMockRecorder) Acquire(lockName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockLocker)(nil).Acquire), lockName, opts)
}

// Release mocks base method.
func (m *MockLocker) Release(lock lockgate.LockHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", lock)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockLockerMockRecorder) Release(lock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockLocker)(nil).Release), lock)
}
