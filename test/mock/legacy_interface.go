// Code generated by MockGen. DO NOT EDIT.
// Source: legacy_interface.go
//
// Generated by this command:
//
//	mockgen -source legacy_interface.go -package mock -destination ../../test/mock/legacy_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	container_backend "github.com/werf/werf/v2/pkg/container_backend"
	image "github.com/werf/werf/v2/pkg/image"
)

// MockLegacyImageInterface is a mock of LegacyImageInterface interface.
type MockLegacyImageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyImageInterfaceMockRecorder
	isgomock struct{}
}

// MockLegacyImageInterfaceMockRecorder is the mock recorder for MockLegacyImageInterface.
type MockLegacyImageInterfaceMockRecorder struct {
	mock *MockLegacyImageInterface
}

// NewMockLegacyImageInterface creates a new mock instance.
func NewMockLegacyImageInterface(ctrl *gomock.Controller) *MockLegacyImageInterface {
	mock := &MockLegacyImageInterface{ctrl: ctrl}
	mock.recorder = &MockLegacyImageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyImageInterface) EXPECT() *MockLegacyImageInterfaceMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockLegacyImageInterface) Build(arg0 context.Context, arg1 container_backend.BuildOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockLegacyImageInterfaceMockRecorder) Build(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockLegacyImageInterface)(nil).Build), arg0, arg1)
}

// BuilderContainer mocks base method.
func (m *MockLegacyImageInterface) BuilderContainer() container_backend.LegacyBuilderContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuilderContainer")
	ret0, _ := ret[0].(container_backend.LegacyBuilderContainer)
	return ret0
}

// BuilderContainer indicates an expected call of BuilderContainer.
func (mr *MockLegacyImageInterfaceMockRecorder) BuilderContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuilderContainer", reflect.TypeOf((*MockLegacyImageInterface)(nil).BuilderContainer))
}

// BuiltID mocks base method.
func (m *MockLegacyImageInterface) BuiltID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuiltID")
	ret0, _ := ret[0].(string)
	return ret0
}

// BuiltID indicates an expected call of BuiltID.
func (mr *MockLegacyImageInterfaceMockRecorder) BuiltID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuiltID", reflect.TypeOf((*MockLegacyImageInterface)(nil).BuiltID))
}

// Container mocks base method.
func (m *MockLegacyImageInterface) Container() container_backend.LegacyContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(container_backend.LegacyContainer)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockLegacyImageInterfaceMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockLegacyImageInterface)(nil).Container))
}

// GetBuildServiceLabels mocks base method.
func (m *MockLegacyImageInterface) GetBuildServiceLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildServiceLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetBuildServiceLabels indicates an expected call of GetBuildServiceLabels.
func (mr *MockLegacyImageInterfaceMockRecorder) GetBuildServiceLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildServiceLabels", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetBuildServiceLabels))
}

// GetCopy mocks base method.
func (m *MockLegacyImageInterface) GetCopy() container_backend.LegacyImageInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCopy")
	ret0, _ := ret[0].(container_backend.LegacyImageInterface)
	return ret0
}

// GetCopy indicates an expected call of GetCopy.
func (mr *MockLegacyImageInterfaceMockRecorder) GetCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCopy", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetCopy))
}

// GetFinalStageDesc mocks base method.
func (m *MockLegacyImageInterface) GetFinalStageDesc() *image.StageDesc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalStageDesc")
	ret0, _ := ret[0].(*image.StageDesc)
	return ret0
}

// GetFinalStageDesc indicates an expected call of GetFinalStageDesc.
func (mr *MockLegacyImageInterfaceMockRecorder) GetFinalStageDesc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalStageDesc", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetFinalStageDesc))
}

// GetImageSpecConfig mocks base method.
func (m *MockLegacyImageInterface) GetImageSpecConfig() *image.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSpecConfig")
	ret0, _ := ret[0].(*image.Config)
	return ret0
}

// GetImageSpecConfig indicates an expected call of GetImageSpecConfig.
func (mr *MockLegacyImageInterfaceMockRecorder) GetImageSpecConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSpecConfig", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetImageSpecConfig))
}

// GetStageDesc mocks base method.
func (m *MockLegacyImageInterface) GetStageDesc() *image.StageDesc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageDesc")
	ret0, _ := ret[0].(*image.StageDesc)
	return ret0
}

// GetStageDesc indicates an expected call of GetStageDesc.
func (mr *MockLegacyImageInterfaceMockRecorder) GetStageDesc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageDesc", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetStageDesc))
}

// GetTargetPlatform mocks base method.
func (m *MockLegacyImageInterface) GetTargetPlatform() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetPlatform")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetPlatform indicates an expected call of GetTargetPlatform.
func (mr *MockLegacyImageInterfaceMockRecorder) GetTargetPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetPlatform", reflect.TypeOf((*MockLegacyImageInterface)(nil).GetTargetPlatform))
}

// Introspect mocks base method.
func (m *MockLegacyImageInterface) Introspect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Introspect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Introspect indicates an expected call of Introspect.
func (mr *MockLegacyImageInterfaceMockRecorder) Introspect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Introspect", reflect.TypeOf((*MockLegacyImageInterface)(nil).Introspect), ctx)
}

// IsExistsLocally mocks base method.
func (m *MockLegacyImageInterface) IsExistsLocally() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistsLocally")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistsLocally indicates an expected call of IsExistsLocally.
func (mr *MockLegacyImageInterfaceMockRecorder) IsExistsLocally() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsLocally", reflect.TypeOf((*MockLegacyImageInterface)(nil).IsExistsLocally))
}

// Name mocks base method.
func (m *MockLegacyImageInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLegacyImageInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLegacyImageInterface)(nil).Name))
}

// Pull mocks base method.
func (m *MockLegacyImageInterface) Pull(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockLegacyImageInterfaceMockRecorder) Pull(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockLegacyImageInterface)(nil).Pull), ctx)
}

// Push mocks base method.
func (m *MockLegacyImageInterface) Push(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockLegacyImageInterfaceMockRecorder) Push(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockLegacyImageInterface)(nil).Push), ctx)
}

// SetBuildServiceLabels mocks base method.
func (m *MockLegacyImageInterface) SetBuildServiceLabels(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBuildServiceLabels", labels)
}

// SetBuildServiceLabels indicates an expected call of SetBuildServiceLabels.
func (mr *MockLegacyImageInterfaceMockRecorder) SetBuildServiceLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuildServiceLabels", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetBuildServiceLabels), labels)
}

// SetBuiltID mocks base method.
func (m *MockLegacyImageInterface) SetBuiltID(builtID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBuiltID", builtID)
}

// SetBuiltID indicates an expected call of SetBuiltID.
func (mr *MockLegacyImageInterfaceMockRecorder) SetBuiltID(builtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuiltID", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetBuiltID), builtID)
}

// SetCommitChangeOptions mocks base method.
func (m *MockLegacyImageInterface) SetCommitChangeOptions(opts container_backend.LegacyCommitChangeOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommitChangeOptions", opts)
}

// SetCommitChangeOptions indicates an expected call of SetCommitChangeOptions.
func (mr *MockLegacyImageInterfaceMockRecorder) SetCommitChangeOptions(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitChangeOptions", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetCommitChangeOptions), opts)
}

// SetFinalStageDesc mocks base method.
func (m *MockLegacyImageInterface) SetFinalStageDesc(arg0 *image.StageDesc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalStageDesc", arg0)
}

// SetFinalStageDesc indicates an expected call of SetFinalStageDesc.
func (mr *MockLegacyImageInterfaceMockRecorder) SetFinalStageDesc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalStageDesc", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetFinalStageDesc), arg0)
}

// SetImageSpecConfig mocks base method.
func (m *MockLegacyImageInterface) SetImageSpecConfig(config *image.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetImageSpecConfig", config)
}

// SetImageSpecConfig indicates an expected call of SetImageSpecConfig.
func (mr *MockLegacyImageInterfaceMockRecorder) SetImageSpecConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageSpecConfig", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetImageSpecConfig), config)
}

// SetInfo mocks base method.
func (m *MockLegacyImageInterface) SetInfo(info *image.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInfo", info)
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockLegacyImageInterfaceMockRecorder) SetInfo(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetInfo), info)
}

// SetName mocks base method.
func (m *MockLegacyImageInterface) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockLegacyImageInterfaceMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetName), name)
}

// SetStageDesc mocks base method.
func (m *MockLegacyImageInterface) SetStageDesc(arg0 *image.StageDesc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStageDesc", arg0)
}

// SetStageDesc indicates an expected call of SetStageDesc.
func (mr *MockLegacyImageInterfaceMockRecorder) SetStageDesc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStageDesc", reflect.TypeOf((*MockLegacyImageInterface)(nil).SetStageDesc), arg0)
}

// MockLegacyContainer is a mock of LegacyContainer interface.
type MockLegacyContainer struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyContainerMockRecorder
	isgomock struct{}
}

// MockLegacyContainerMockRecorder is the mock recorder for MockLegacyContainer.
type MockLegacyContainerMockRecorder struct {
	mock *MockLegacyContainer
}

// NewMockLegacyContainer creates a new mock instance.
func NewMockLegacyContainer(ctrl *gomock.Controller) *MockLegacyContainer {
	mock := &MockLegacyContainer{ctrl: ctrl}
	mock.recorder = &MockLegacyContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyContainer) EXPECT() *MockLegacyContainerMockRecorder {
	return m.recorder
}

// AddRunCommands mocks base method.
func (m *MockLegacyContainer) AddRunCommands(commands ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRunCommands", varargs...)
}

// AddRunCommands indicates an expected call of AddRunCommands.
func (mr *MockLegacyContainerMockRecorder) AddRunCommands(commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRunCommands", reflect.TypeOf((*MockLegacyContainer)(nil).AddRunCommands), commands...)
}

// AddServiceRunCommands mocks base method.
func (m *MockLegacyContainer) AddServiceRunCommands(commands ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddServiceRunCommands", varargs...)
}

// AddServiceRunCommands indicates an expected call of AddServiceRunCommands.
func (mr *MockLegacyContainerMockRecorder) AddServiceRunCommands(commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceRunCommands", reflect.TypeOf((*MockLegacyContainer)(nil).AddServiceRunCommands), commands...)
}

// CommitChangeOptions mocks base method.
func (m *MockLegacyContainer) CommitChangeOptions() container_backend.LegacyContainerOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitChangeOptions")
	ret0, _ := ret[0].(container_backend.LegacyContainerOptions)
	return ret0
}

// CommitChangeOptions indicates an expected call of CommitChangeOptions.
func (mr *MockLegacyContainerMockRecorder) CommitChangeOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitChangeOptions", reflect.TypeOf((*MockLegacyContainer)(nil).CommitChangeOptions))
}

// Name mocks base method.
func (m *MockLegacyContainer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLegacyContainerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLegacyContainer)(nil).Name))
}

// RunOptions mocks base method.
func (m *MockLegacyContainer) RunOptions() container_backend.LegacyContainerOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOptions")
	ret0, _ := ret[0].(container_backend.LegacyContainerOptions)
	return ret0
}

// RunOptions indicates an expected call of RunOptions.
func (mr *MockLegacyContainerMockRecorder) RunOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOptions", reflect.TypeOf((*MockLegacyContainer)(nil).RunOptions))
}

// ServiceCommitChangeOptions mocks base method.
func (m *MockLegacyContainer) ServiceCommitChangeOptions() container_backend.LegacyContainerOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCommitChangeOptions")
	ret0, _ := ret[0].(container_backend.LegacyContainerOptions)
	return ret0
}

// ServiceCommitChangeOptions indicates an expected call of ServiceCommitChangeOptions.
func (mr *MockLegacyContainerMockRecorder) ServiceCommitChangeOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCommitChangeOptions", reflect.TypeOf((*MockLegacyContainer)(nil).ServiceCommitChangeOptions))
}

// UserCommitChanges mocks base method.
func (m *MockLegacyContainer) UserCommitChanges() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCommitChanges")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UserCommitChanges indicates an expected call of UserCommitChanges.
func (mr *MockLegacyContainerMockRecorder) UserCommitChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCommitChanges", reflect.TypeOf((*MockLegacyContainer)(nil).UserCommitChanges))
}

// UserRunCommands mocks base method.
func (m *MockLegacyContainer) UserRunCommands() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRunCommands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UserRunCommands indicates an expected call of UserRunCommands.
func (mr *MockLegacyContainerMockRecorder) UserRunCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRunCommands", reflect.TypeOf((*MockLegacyContainer)(nil).UserRunCommands))
}

// MockLegacyBuilderContainer is a mock of LegacyBuilderContainer interface.
type MockLegacyBuilderContainer struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyBuilderContainerMockRecorder
	isgomock struct{}
}

// MockLegacyBuilderContainerMockRecorder is the mock recorder for MockLegacyBuilderContainer.
type MockLegacyBuilderContainerMockRecorder struct {
	mock *MockLegacyBuilderContainer
}

// NewMockLegacyBuilderContainer creates a new mock instance.
func NewMockLegacyBuilderContainer(ctrl *gomock.Controller) *MockLegacyBuilderContainer {
	mock := &MockLegacyBuilderContainer{ctrl: ctrl}
	mock.recorder = &MockLegacyBuilderContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyBuilderContainer) EXPECT() *MockLegacyBuilderContainerMockRecorder {
	return m.recorder
}

// AddEnv mocks base method.
func (m *MockLegacyBuilderContainer) AddEnv(envs map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEnv", envs)
}

// AddEnv indicates an expected call of AddEnv.
func (mr *MockLegacyBuilderContainerMockRecorder) AddEnv(envs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnv", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddEnv), envs)
}

// AddExpose mocks base method.
func (m *MockLegacyBuilderContainer) AddExpose(exposes ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range exposes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddExpose", varargs...)
}

// AddExpose indicates an expected call of AddExpose.
func (mr *MockLegacyBuilderContainerMockRecorder) AddExpose(exposes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpose", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddExpose), exposes...)
}

// AddLabel mocks base method.
func (m *MockLegacyBuilderContainer) AddLabel(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLabel", labels)
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockLegacyBuilderContainerMockRecorder) AddLabel(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddLabel), labels)
}

// AddRunCommands mocks base method.
func (m *MockLegacyBuilderContainer) AddRunCommands(commands ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRunCommands", varargs...)
}

// AddRunCommands indicates an expected call of AddRunCommands.
func (mr *MockLegacyBuilderContainerMockRecorder) AddRunCommands(commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRunCommands", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddRunCommands), commands...)
}

// AddServiceRunCommands mocks base method.
func (m *MockLegacyBuilderContainer) AddServiceRunCommands(commands ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddServiceRunCommands", varargs...)
}

// AddServiceRunCommands indicates an expected call of AddServiceRunCommands.
func (mr *MockLegacyBuilderContainerMockRecorder) AddServiceRunCommands(commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceRunCommands", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddServiceRunCommands), commands...)
}

// AddVolume mocks base method.
func (m *MockLegacyBuilderContainer) AddVolume(volumes ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range volumes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddVolume", varargs...)
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockLegacyBuilderContainerMockRecorder) AddVolume(volumes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddVolume), volumes...)
}

// AddVolumeFrom mocks base method.
func (m *MockLegacyBuilderContainer) AddVolumeFrom(volumesFrom ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range volumesFrom {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddVolumeFrom", varargs...)
}

// AddVolumeFrom indicates an expected call of AddVolumeFrom.
func (mr *MockLegacyBuilderContainerMockRecorder) AddVolumeFrom(volumesFrom ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeFrom", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).AddVolumeFrom), volumesFrom...)
}

// MountSSHAgentSocket mocks base method.
func (m *MockLegacyBuilderContainer) MountSSHAgentSocket(sshAuthSock string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MountSSHAgentSocket", sshAuthSock)
}

// MountSSHAgentSocket indicates an expected call of MountSSHAgentSocket.
func (mr *MockLegacyBuilderContainerMockRecorder) MountSSHAgentSocket(sshAuthSock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountSSHAgentSocket", reflect.TypeOf((*MockLegacyBuilderContainer)(nil).MountSSHAgentSocket), sshAuthSock)
}

// MockLegacyContainerOptions is a mock of LegacyContainerOptions interface.
type MockLegacyContainerOptions struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyContainerOptionsMockRecorder
	isgomock struct{}
}

// MockLegacyContainerOptionsMockRecorder is the mock recorder for MockLegacyContainerOptions.
type MockLegacyContainerOptionsMockRecorder struct {
	mock *MockLegacyContainerOptions
}

// NewMockLegacyContainerOptions creates a new mock instance.
func NewMockLegacyContainerOptions(ctrl *gomock.Controller) *MockLegacyContainerOptions {
	mock := &MockLegacyContainerOptions{ctrl: ctrl}
	mock.recorder = &MockLegacyContainerOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyContainerOptions) EXPECT() *MockLegacyContainerOptionsMockRecorder {
	return m.recorder
}

// AddCmd mocks base method.
func (m *MockLegacyContainerOptions) AddCmd(cmd string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCmd", cmd)
}

// AddCmd indicates an expected call of AddCmd.
func (mr *MockLegacyContainerOptionsMockRecorder) AddCmd(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCmd", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddCmd), cmd)
}

// AddEntrypoint mocks base method.
func (m *MockLegacyContainerOptions) AddEntrypoint(entrypoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEntrypoint", entrypoint)
}

// AddEntrypoint indicates an expected call of AddEntrypoint.
func (mr *MockLegacyContainerOptionsMockRecorder) AddEntrypoint(entrypoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntrypoint", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddEntrypoint), entrypoint)
}

// AddEnv mocks base method.
func (m *MockLegacyContainerOptions) AddEnv(envs map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEnv", envs)
}

// AddEnv indicates an expected call of AddEnv.
func (mr *MockLegacyContainerOptionsMockRecorder) AddEnv(envs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnv", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddEnv), envs)
}

// AddExpose mocks base method.
func (m *MockLegacyContainerOptions) AddExpose(exposes ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range exposes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddExpose", varargs...)
}

// AddExpose indicates an expected call of AddExpose.
func (mr *MockLegacyContainerOptionsMockRecorder) AddExpose(exposes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpose", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddExpose), exposes...)
}

// AddHealthCheck mocks base method.
func (m *MockLegacyContainerOptions) AddHealthCheck(check string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHealthCheck", check)
}

// AddHealthCheck indicates an expected call of AddHealthCheck.
func (mr *MockLegacyContainerOptionsMockRecorder) AddHealthCheck(check any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHealthCheck", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddHealthCheck), check)
}

// AddLabel mocks base method.
func (m *MockLegacyContainerOptions) AddLabel(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLabel", labels)
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockLegacyContainerOptionsMockRecorder) AddLabel(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddLabel), labels)
}

// AddUser mocks base method.
func (m *MockLegacyContainerOptions) AddUser(user string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", user)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockLegacyContainerOptionsMockRecorder) AddUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddUser), user)
}

// AddVolume mocks base method.
func (m *MockLegacyContainerOptions) AddVolume(volumes ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range volumes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddVolume", varargs...)
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockLegacyContainerOptionsMockRecorder) AddVolume(volumes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddVolume), volumes...)
}

// AddVolumeFrom mocks base method.
func (m *MockLegacyContainerOptions) AddVolumeFrom(volumesFrom ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range volumesFrom {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddVolumeFrom", varargs...)
}

// AddVolumeFrom indicates an expected call of AddVolumeFrom.
func (mr *MockLegacyContainerOptionsMockRecorder) AddVolumeFrom(volumesFrom ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeFrom", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddVolumeFrom), volumesFrom...)
}

// AddWorkdir mocks base method.
func (m *MockLegacyContainerOptions) AddWorkdir(workdir string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWorkdir", workdir)
}

// AddWorkdir indicates an expected call of AddWorkdir.
func (mr *MockLegacyContainerOptionsMockRecorder) AddWorkdir(workdir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkdir", reflect.TypeOf((*MockLegacyContainerOptions)(nil).AddWorkdir), workdir)
}
